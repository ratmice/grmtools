name: Test %parse-param using the calculator grammar
yacckind: Original(YaccOriginalActionKind::UserAction)
grammar: |
    %start Expr
    %actiontype Result<u64, ()>
    %avoid_insert 'INT'
    %parse_param <'a>(x : u64)
    %%
      Expr: Expr '+' Term {
                *x = $1? + $3?;
                Ok(*x)
            }
          | Term { #![allow(unused_mut,unused_variables)] $1 }
          ;

      Term: Term '*' Factor {
                *x = $1? * $3?;
                Ok(*x)
            }
          | Factor { #![allow(unused_mut, unused_variables)] $1 }
          ;

    Factor: '(' Expr ')' { #![allow(unused_mut, unused_variables)] $2 }
          | 'INT' {
                let l = $1.map_err(|_| ())?;
                match $lexer.span_str(l.span()).parse::<u64>() {
                    Ok(v) => {
                               *x = v;
                               Ok(*x) },
                    Err(_) => {
                        let ((_, col), _) = $lexer.line_col(l.span());
                        eprintln!("Error at column {}: '{}' cannot be represented as a u64",
                                  col,
                                  $lexer.span_str(l.span()));
                        Err(())
                    }
                }
            }
          ;
lexer: |
    %%
    [0-9]+ "INT"
    \+ "+"
    \* "*"
    \( "("
    \) ")"
    [\t ]+ ;
